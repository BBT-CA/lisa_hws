#include <iostream>
#include "Iterator.h"
#include "Node.h"
#include "List.h"
#include "ListLoc.h"
#include "Locator.h"
#include "Sorted.h"

//???????????????????????????????????????????????????????//
// test part for hw4 ===============================================

			/* create a point to obj of ListLoc , 	  pass to List constructor ol List
			 * List::List(Locator *locator) { loc = locator;}
			 * to let loc point to new ListLoc obj new created
			 *
			 */
//???????????????????????????????????????????????????????//
// test part for hw4 ===============================================
int main()
 {

//	============================list inintionalize===========================
//ListLoc listloc;
//	List* lc = new List(&listloc);
	List l;
	 Iterator iter2 = l.createIterator();
	 l.push_back(1);
	 l.push_back(2);
	 l.push_back(3);
	 l.push_back(4);
	 l.show();
   //===================================test erase head====
	           Iterator iter3= l.createIterator();
	         // iter3.next();
	        //   iter3.previous();
	           iter3.previous();
	           l.erase(iter3);
	           l.show();
	          cout<< "see head still ok"<<endl;

	          //===================================test erase elem====
	          Iterator iter4= l.createIterator();
	           iter4.next();
	          l.erase(iter4);
	          l.show();

//test locator

	    //  myloc= l.setLocator(1, 3);  //type =1, data =3
	     // iter1 = myloc->locate(3);
	    //  cout<<iter1.get()<<endl;
	    //Iterator iter1= l.createIterator();
	     //   l.erase(iter1);
	   // iter1.next();
	 //============================test insert===================
	   Iterator iter1= l.createIterator();
           l.insert(iter1  ,10);
	      l.show();
           cout<< "after insert after"<<endl;

   //============================test insert= and previous()==================
          	  Iterator iter6= l.createIterator();
          	   iter6.next();
          	   iter6.next();
          	    iter6.next();
          	    iter6.previous();
          	    l.insert(iter6  ,111);
          	    l.show();
          	    cout<< "after insert after"<<endl;
  //============================================
          	  Iterator iter7= l.createIterator();
           	 iter7.next();
           	 l.insert(iter7  ,222);
           	 l.show();
           	 cout<< "after insert after"<<endl;
//======================test sorted class without straterge pattern
           	 Sorted sl;
         //  Iterator	 iter8 = sl.createIterator();
        //   	 sl.push_back(6);
      //     	 sl.insert(iter8,1);
     //     return 0;
 }
